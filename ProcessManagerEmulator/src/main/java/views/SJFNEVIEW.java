/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import controllers.SJFNEController;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import logic.ProcesoFIFO;
import logic.ProcesoN;
import models.SJFNEModel;

/**
 *
 * @author Jordan Villalobos
 */
public class SJFNEVIEW extends javax.swing.JFrame implements Observer {

    private SJFNEModel model;
    private SJFNEController controller;
    private int contador;
    PaintSJFNE painter;
    List<ProcesoN> procesos = new ArrayList<>();

    public SJFNEModel getModel() {

        return model;
    }

    public SJFNEController getController() {
        return controller;
    }

    public void setController(SJFNEController controller) {
        this.controller = controller;
    }

    public void setModel(SJFNEModel model) {

        this.model = model;
        model.addObserver(this);

    }

    /**
     * Creates new form SJFNEVIEW
     */
    public SJFNEVIEW() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        RafagaFD = new javax.swing.JTextField();
        Agregar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Llegada = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label1.setText("Algoritmo de planificacion SJSF NO EXPULSIVO");

        jLabel1.setText("Agregar Proceso");

        jLabel2.setText("Rafaga");

        RafagaFD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RafagaFDActionPerformed(evt);
            }
        });

        Agregar.setText("Agregar");
        Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("LISTA DE PROCESOS");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#Proceso", "Llegada", "Rafaga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Iniciar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Resolucion del algoritmo");

        jLabel5.setText("Llegada");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(Llegada, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(RafagaFD, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel4)))
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Agregar)
                        .addGap(255, 255, 255))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(RafagaFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Agregar)
                    .addComponent(jLabel5)
                    .addComponent(Llegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(224, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String proceso = "P" + contador;
        int rafaga = Integer.parseInt(RafagaFD.getText());
        int llegada = Integer.parseInt(Llegada.getText());

        ProcesoN p = new ProcesoN(proceso, llegada, rafaga);
        //verificar que no se haya ya puesto un proceso en esa llegada
        int counter = 0;

        for (ProcesoN pp : procesos) {
            if (p.getArrivalTime() == pp.getArrivalTime()) {
                counter = 1;
            }
            System.out.println(pp.getProcessName());
        }

        if (counter == 0) {
            procesos.add(p);
            model.addRow(new Object[]{proceso, llegada, rafaga});

            this.contador++;
        } else {
            JOptionPane.showMessageDialog(null, "Â¡El tiempo de llegada ya ha sido ocupado por otro proceso!!!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_AgregarActionPerformed

    private void RafagaFDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RafagaFDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RafagaFDActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int cant = procesos.size();
        int total = 0;
        int maxArrivalTime = 0;

// Calcular la suma total de los tiempos de duraciÃ³n y encontrar el mayor tiempo de llegada
        for (int i = 0; i < procesos.size(); i++) {
            total += procesos.get(i).getDurationTime();
            maxArrivalTime = Math.max(maxArrivalTime, procesos.get(i).getArrivalTime());
        }
        
        ordenarProcesosSJ2F();
        int[][] matrizEjemplo = new int[cant][total + maxArrivalTime];
        ordenarProcesosSJF();
        for (int i = 0; i < procesos.size(); i++) {
            ProcesoN p = procesos.get(i);
            matrizEjemplo[i][p.getArrivalTime()] = 1;
        }

        int tamaÃ±oRectanguloAncho = 150; // Ancho del rectÃ¡ngulo en pÃ­xeles
        int tamaÃ±oRectanguloAlto = 90; // Alto del rectÃ¡ngulo en pÃ­xeles
        int espaciadoHorizontal = 25; // Espaciado horizontal entre rectÃ¡ngulos en pÃ­xeles
        int espaciadoVertical = 25; // Espaciado vertical entre rectÃ¡ngulos en pÃ­xeles

        SwingUtilities.invokeLater(() -> {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            // Crear el marco principal y agregar el componente personalizado
            JFrame frame = new JFrame("Resolucion del algoritmo");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(600, 400);

            painter = new PaintSJFNE(matrizEjemplo, tamaÃ±oRectanguloAncho, tamaÃ±oRectanguloAlto,
                    espaciadoHorizontal, espaciadoVertical, procesos);
            frame.add(painter);

            frame.setVisible(true);

            for (int i = procesos.size() - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            // OperaciÃ³n procesos.clear() dentro de invokeLater
            procesos.clear();
            contador = 0;
        });

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SJFNEVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SJFNEVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SJFNEVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SJFNEVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SJFNEVIEW().setVisible(true);
            }
        });
    }

    private void ordenarProcesosSJF() {
      
        //El que llega de primero siempre se ejecuta primero.
        List<ProcesoN> procesosAux = procesos;
        procesosAux.sort(Comparator.comparingInt(ProcesoN::getArrivalTime));

// Crear una lista auxiliar para los procesos ordenados
        ProcesoN pp = procesosAux.get(0);
        List<ProcesoN> procesosOrdenados = new ArrayList<>();
        procesosOrdenados.add(pp);

// Crear una lista auxiliar de procesos sin el proceso seleccionado inicialmente
        List<ProcesoN> procesosRestantes = new ArrayList<>(procesos);
        procesosRestantes.remove(pp);

// Ordenar los procesos restantes por tiempo de duraciÃ³n ascendente
        procesosRestantes.sort(Comparator.comparingInt(ProcesoN::getDurationTime));

// Agregar los procesos restantes a la lista de procesos ordenados
        procesosOrdenados.addAll(procesosRestantes);
        
        procesos = procesosOrdenados;

    }
    
    private void ordenarProcesosSJ2F() {
        
        List<ProcesoN> procesosFinal  = new ArrayList();
        
        int tiempo = 0;
        
        while(!procesos.isEmpty()){
            
            List<ProcesoN> procesosLlegados = new ArrayList<>();
            
            for(ProcesoN proceso : procesos){
                
                if(proceso.getArrivalTime() <= tiempo){
                    procesosLlegados.add(proceso);
                }
            }
            
            procesosLlegados.sort(Comparator.comparingInt(ProcesoN::getDurationTime));
            
            if(!procesosLlegados.isEmpty()){
                ProcesoN pp = procesosLlegados.get(0);
                int nuevoEjecuccion = pp.getDurationTime();
                
                procesosFinal.add(pp);
                tiempo += nuevoEjecuccion;
                
                procesos.remove(pp);
            }
            else{
                tiempo++;
            }
        }
        procesos = procesosFinal;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar;
    private javax.swing.JTextField Llegada;
    private javax.swing.JTextField RafagaFD;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        this.repaint();
    }
}
